// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Endpoint {
    #[prost(message, optional, tag = "1")]
    pub address: ::core::option::Option<super::super::core::v3::Address>,
    #[prost(message, optional, tag = "2")]
    pub health_check_config: ::core::option::Option<endpoint::HealthCheckConfig>,
    #[prost(string, tag = "3")]
    pub hostname: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "4")]
    pub additional_addresses: ::prost::alloc::vec::Vec<endpoint::AdditionalAddress>,
}
/// Nested message and enum types in `Endpoint`.
pub mod endpoint {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct HealthCheckConfig {
        #[prost(uint32, tag = "1")]
        pub port_value: u32,
        #[prost(string, tag = "2")]
        pub hostname: ::prost::alloc::string::String,
        #[prost(message, optional, tag = "3")]
        pub address: ::core::option::Option<super::super::super::core::v3::Address>,
        #[prost(bool, tag = "4")]
        pub disable_active_health_check: bool,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct AdditionalAddress {
        #[prost(message, optional, tag = "1")]
        pub address: ::core::option::Option<super::super::super::core::v3::Address>,
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LbEndpoint {
    #[prost(enumeration = "super::super::core::v3::HealthStatus", tag = "2")]
    pub health_status: i32,
    #[prost(message, optional, tag = "3")]
    pub metadata: ::core::option::Option<super::super::core::v3::Metadata>,
    #[prost(message, optional, tag = "4")]
    pub load_balancing_weight: ::core::option::Option<
        super::super::super::super::google::protobuf::UInt32Value,
    >,
    #[prost(oneof = "lb_endpoint::HostIdentifier", tags = "1, 5")]
    pub host_identifier: ::core::option::Option<lb_endpoint::HostIdentifier>,
}
/// Nested message and enum types in `LbEndpoint`.
pub mod lb_endpoint {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum HostIdentifier {
        #[prost(message, tag = "1")]
        Endpoint(super::Endpoint),
        #[prost(string, tag = "5")]
        EndpointName(::prost::alloc::string::String),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LedsClusterLocalityConfig {
    #[prost(message, optional, tag = "1")]
    pub leds_config: ::core::option::Option<super::super::core::v3::ConfigSource>,
    #[prost(string, tag = "2")]
    pub leds_collection_name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LocalityLbEndpoints {
    #[prost(message, optional, tag = "1")]
    pub locality: ::core::option::Option<super::super::core::v3::Locality>,
    #[prost(message, optional, tag = "9")]
    pub metadata: ::core::option::Option<super::super::core::v3::Metadata>,
    #[prost(message, repeated, tag = "2")]
    pub lb_endpoints: ::prost::alloc::vec::Vec<LbEndpoint>,
    #[prost(message, optional, tag = "3")]
    pub load_balancing_weight: ::core::option::Option<
        super::super::super::super::google::protobuf::UInt32Value,
    >,
    #[prost(uint32, tag = "5")]
    pub priority: u32,
    #[prost(message, optional, tag = "6")]
    pub proximity: ::core::option::Option<
        super::super::super::super::google::protobuf::UInt32Value,
    >,
    #[prost(oneof = "locality_lb_endpoints::LbConfig", tags = "7, 8")]
    pub lb_config: ::core::option::Option<locality_lb_endpoints::LbConfig>,
}
/// Nested message and enum types in `LocalityLbEndpoints`.
pub mod locality_lb_endpoints {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct LbEndpointList {
        #[prost(message, repeated, tag = "1")]
        pub lb_endpoints: ::prost::alloc::vec::Vec<super::LbEndpoint>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum LbConfig {
        #[prost(message, tag = "7")]
        LoadBalancerEndpoints(LbEndpointList),
        #[prost(message, tag = "8")]
        LedsClusterLocalityConfig(super::LedsClusterLocalityConfig),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClusterLoadAssignment {
    #[prost(string, tag = "1")]
    pub cluster_name: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub endpoints: ::prost::alloc::vec::Vec<LocalityLbEndpoints>,
    #[prost(map = "string, message", tag = "5")]
    pub named_endpoints: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        Endpoint,
    >,
    #[prost(message, optional, tag = "4")]
    pub policy: ::core::option::Option<cluster_load_assignment::Policy>,
}
/// Nested message and enum types in `ClusterLoadAssignment`.
pub mod cluster_load_assignment {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Policy {
        #[prost(message, repeated, tag = "2")]
        pub drop_overloads: ::prost::alloc::vec::Vec<policy::DropOverload>,
        #[prost(message, optional, tag = "3")]
        pub overprovisioning_factor: ::core::option::Option<
            super::super::super::super::super::google::protobuf::UInt32Value,
        >,
        #[prost(message, optional, tag = "4")]
        pub endpoint_stale_after: ::core::option::Option<
            super::super::super::super::super::google::protobuf::Duration,
        >,
        #[prost(bool, tag = "6")]
        pub weighted_priority_health: bool,
    }
    /// Nested message and enum types in `Policy`.
    pub mod policy {
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct DropOverload {
            #[prost(string, tag = "1")]
            pub category: ::prost::alloc::string::String,
            #[prost(message, optional, tag = "2")]
            pub drop_percentage: ::core::option::Option<
                super::super::super::super::super::r#type::v3::FractionalPercent,
            >,
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpstreamLocalityStats {
    #[prost(message, optional, tag = "1")]
    pub locality: ::core::option::Option<super::super::core::v3::Locality>,
    #[prost(uint64, tag = "2")]
    pub total_successful_requests: u64,
    #[prost(uint64, tag = "3")]
    pub total_requests_in_progress: u64,
    #[prost(uint64, tag = "4")]
    pub total_error_requests: u64,
    #[prost(uint64, tag = "8")]
    pub total_issued_requests: u64,
    #[prost(uint64, tag = "9")]
    pub total_active_connections: u64,
    #[prost(uint64, tag = "10")]
    pub total_new_connections: u64,
    #[prost(uint64, tag = "11")]
    pub total_fail_connections: u64,
    #[prost(message, optional, tag = "12")]
    pub cpu_utilization: ::core::option::Option<UnnamedEndpointLoadMetricStats>,
    #[prost(message, optional, tag = "13")]
    pub mem_utilization: ::core::option::Option<UnnamedEndpointLoadMetricStats>,
    #[prost(message, optional, tag = "14")]
    pub application_utilization: ::core::option::Option<UnnamedEndpointLoadMetricStats>,
    #[prost(message, repeated, tag = "5")]
    pub load_metric_stats: ::prost::alloc::vec::Vec<EndpointLoadMetricStats>,
    #[prost(message, repeated, tag = "7")]
    pub upstream_endpoint_stats: ::prost::alloc::vec::Vec<UpstreamEndpointStats>,
    #[prost(uint32, tag = "6")]
    pub priority: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpstreamEndpointStats {
    #[prost(message, optional, tag = "1")]
    pub address: ::core::option::Option<super::super::core::v3::Address>,
    #[prost(message, optional, tag = "6")]
    pub metadata: ::core::option::Option<
        super::super::super::super::google::protobuf::Struct,
    >,
    #[prost(uint64, tag = "2")]
    pub total_successful_requests: u64,
    #[prost(uint64, tag = "3")]
    pub total_requests_in_progress: u64,
    #[prost(uint64, tag = "4")]
    pub total_error_requests: u64,
    #[prost(uint64, tag = "7")]
    pub total_issued_requests: u64,
    #[prost(message, repeated, tag = "5")]
    pub load_metric_stats: ::prost::alloc::vec::Vec<EndpointLoadMetricStats>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EndpointLoadMetricStats {
    #[prost(string, tag = "1")]
    pub metric_name: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub num_requests_finished_with_metric: u64,
    #[prost(double, tag = "3")]
    pub total_metric_value: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnnamedEndpointLoadMetricStats {
    #[prost(uint64, tag = "1")]
    pub num_requests_finished_with_metric: u64,
    #[prost(double, tag = "2")]
    pub total_metric_value: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClusterStats {
    #[prost(string, tag = "1")]
    pub cluster_name: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub cluster_service_name: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub upstream_locality_stats: ::prost::alloc::vec::Vec<UpstreamLocalityStats>,
    #[prost(uint64, tag = "3")]
    pub total_dropped_requests: u64,
    #[prost(message, repeated, tag = "5")]
    pub dropped_requests: ::prost::alloc::vec::Vec<cluster_stats::DroppedRequests>,
    #[prost(message, optional, tag = "4")]
    pub load_report_interval: ::core::option::Option<
        super::super::super::super::google::protobuf::Duration,
    >,
}
/// Nested message and enum types in `ClusterStats`.
pub mod cluster_stats {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct DroppedRequests {
        #[prost(string, tag = "1")]
        pub category: ::prost::alloc::string::String,
        #[prost(uint64, tag = "2")]
        pub dropped_count: u64,
    }
}
