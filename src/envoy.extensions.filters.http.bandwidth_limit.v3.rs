// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BandwidthLimit {
    #[prost(string, tag = "1")]
    pub stat_prefix: ::prost::alloc::string::String,
    #[prost(enumeration = "bandwidth_limit::EnableMode", tag = "2")]
    pub enable_mode: i32,
    #[prost(message, optional, tag = "3")]
    pub limit_kbps: ::core::option::Option<
        super::super::super::super::super::super::google::protobuf::UInt64Value,
    >,
    #[prost(message, optional, tag = "4")]
    pub fill_interval: ::core::option::Option<
        super::super::super::super::super::super::google::protobuf::Duration,
    >,
    #[prost(message, optional, tag = "5")]
    pub runtime_enabled: ::core::option::Option<
        super::super::super::super::super::config::core::v3::RuntimeFeatureFlag,
    >,
    #[prost(bool, tag = "6")]
    pub enable_response_trailers: bool,
    #[prost(string, tag = "7")]
    pub response_trailer_prefix: ::prost::alloc::string::String,
}
/// Nested message and enum types in `BandwidthLimit`.
pub mod bandwidth_limit {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum EnableMode {
        Disabled = 0,
        Request = 1,
        Response = 2,
        RequestAndResponse = 3,
    }
    impl EnableMode {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                EnableMode::Disabled => "DISABLED",
                EnableMode::Request => "REQUEST",
                EnableMode::Response => "RESPONSE",
                EnableMode::RequestAndResponse => "REQUEST_AND_RESPONSE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "DISABLED" => Some(Self::Disabled),
                "REQUEST" => Some(Self::Request),
                "RESPONSE" => Some(Self::Response),
                "REQUEST_AND_RESPONSE" => Some(Self::RequestAndResponse),
                _ => None,
            }
        }
    }
}
