// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HttpProtocolOptions {
    #[prost(message, optional, tag = "1")]
    pub common_http_protocol_options: ::core::option::Option<
        super::super::super::super::config::core::v3::HttpProtocolOptions,
    >,
    #[prost(message, optional, tag = "2")]
    pub upstream_http_protocol_options: ::core::option::Option<
        super::super::super::super::config::core::v3::UpstreamHttpProtocolOptions,
    >,
    #[prost(message, repeated, tag = "6")]
    pub http_filters: ::prost::alloc::vec::Vec<
        super::super::super::filters::network::http_connection_manager::v3::HttpFilter,
    >,
    #[prost(message, optional, tag = "7")]
    pub header_validation_config: ::core::option::Option<
        super::super::super::super::config::core::v3::TypedExtensionConfig,
    >,
    #[prost(oneof = "http_protocol_options::UpstreamProtocolOptions", tags = "3, 4, 5")]
    pub upstream_protocol_options: ::core::option::Option<
        http_protocol_options::UpstreamProtocolOptions,
    >,
}
/// Nested message and enum types in `HttpProtocolOptions`.
pub mod http_protocol_options {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ExplicitHttpConfig {
        #[prost(oneof = "explicit_http_config::ProtocolConfig", tags = "1, 2, 3")]
        pub protocol_config: ::core::option::Option<
            explicit_http_config::ProtocolConfig,
        >,
    }
    /// Nested message and enum types in `ExplicitHttpConfig`.
    pub mod explicit_http_config {
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum ProtocolConfig {
            #[prost(message, tag = "1")]
            HttpProtocolOptions(
                super::super::super::super::super::super::config::core::v3::Http1ProtocolOptions,
            ),
            #[prost(message, tag = "2")]
            Http2ProtocolOptions(
                super::super::super::super::super::super::config::core::v3::Http2ProtocolOptions,
            ),
            #[prost(message, tag = "3")]
            Http3ProtocolOptions(
                super::super::super::super::super::super::config::core::v3::Http3ProtocolOptions,
            ),
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct UseDownstreamHttpConfig {
        #[prost(message, optional, tag = "1")]
        pub http_protocol_options: ::core::option::Option<
            super::super::super::super::super::config::core::v3::Http1ProtocolOptions,
        >,
        #[prost(message, optional, tag = "2")]
        pub http2_protocol_options: ::core::option::Option<
            super::super::super::super::super::config::core::v3::Http2ProtocolOptions,
        >,
        #[prost(message, optional, tag = "3")]
        pub http3_protocol_options: ::core::option::Option<
            super::super::super::super::super::config::core::v3::Http3ProtocolOptions,
        >,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct AutoHttpConfig {
        #[prost(message, optional, tag = "1")]
        pub http_protocol_options: ::core::option::Option<
            super::super::super::super::super::config::core::v3::Http1ProtocolOptions,
        >,
        #[prost(message, optional, tag = "2")]
        pub http2_protocol_options: ::core::option::Option<
            super::super::super::super::super::config::core::v3::Http2ProtocolOptions,
        >,
        #[prost(message, optional, tag = "3")]
        pub http3_protocol_options: ::core::option::Option<
            super::super::super::super::super::config::core::v3::Http3ProtocolOptions,
        >,
        #[prost(message, optional, tag = "4")]
        pub alternate_protocols_cache_options: ::core::option::Option<
            super::super::super::super::super::config::core::v3::AlternateProtocolsCacheOptions,
        >,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum UpstreamProtocolOptions {
        #[prost(message, tag = "3")]
        ExplicitHttpConfig(ExplicitHttpConfig),
        #[prost(message, tag = "4")]
        UseDownstreamProtocolConfig(UseDownstreamHttpConfig),
        #[prost(message, tag = "5")]
        AutoConfig(AutoHttpConfig),
    }
}
