// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BufferBehavior {
    #[prost(oneof = "buffer_behavior::Behavior", tags = "1, 2, 3, 4, 5")]
    pub behavior: ::core::option::Option<buffer_behavior::Behavior>,
}
/// Nested message and enum types in `BufferBehavior`.
pub mod buffer_behavior {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct StreamWhenPossible {}
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Bypass {}
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct InjectContentLengthIfNecessary {}
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct FullyBufferAndAlwaysInjectContentLength {}
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct FullyBuffer {}
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Behavior {
        #[prost(message, tag = "1")]
        StreamWhenPossible(StreamWhenPossible),
        #[prost(message, tag = "2")]
        Bypass(Bypass),
        #[prost(message, tag = "3")]
        InjectContentLengthIfNecessary(InjectContentLengthIfNecessary),
        #[prost(message, tag = "4")]
        FullyBufferAndAlwaysInjectContentLength(FullyBufferAndAlwaysInjectContentLength),
        #[prost(message, tag = "5")]
        FullyBuffer(FullyBuffer),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StreamConfig {
    #[prost(message, optional, tag = "1")]
    pub behavior: ::core::option::Option<BufferBehavior>,
    #[prost(message, optional, tag = "2")]
    pub memory_buffer_bytes_limit: ::core::option::Option<
        super::super::super::super::super::super::google::protobuf::UInt64Value,
    >,
    #[prost(message, optional, tag = "3")]
    pub storage_buffer_bytes_limit: ::core::option::Option<
        super::super::super::super::super::super::google::protobuf::UInt64Value,
    >,
    #[prost(message, optional, tag = "4")]
    pub storage_buffer_queue_high_watermark_bytes: ::core::option::Option<
        super::super::super::super::super::super::google::protobuf::UInt64Value,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileSystemBufferFilterConfig {
    #[prost(message, optional, tag = "1")]
    pub manager_config: ::core::option::Option<
        super::super::super::super::common::async_files::v3::AsyncFileManagerConfig,
    >,
    #[prost(message, optional, tag = "2")]
    pub storage_buffer_path: ::core::option::Option<
        super::super::super::super::super::super::google::protobuf::StringValue,
    >,
    #[prost(message, optional, tag = "3")]
    pub request: ::core::option::Option<StreamConfig>,
    #[prost(message, optional, tag = "4")]
    pub response: ::core::option::Option<StreamConfig>,
}
