// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FilterStateValue {
    #[prost(string, tag = "6")]
    pub factory_key: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    pub read_only: bool,
    #[prost(enumeration = "filter_state_value::SharedWithUpstream", tag = "4")]
    pub shared_with_upstream: i32,
    #[prost(bool, tag = "5")]
    pub skip_if_empty: bool,
    #[prost(oneof = "filter_state_value::Key", tags = "1")]
    pub key: ::core::option::Option<filter_state_value::Key>,
    #[prost(oneof = "filter_state_value::Value", tags = "2")]
    pub value: ::core::option::Option<filter_state_value::Value>,
}
/// Nested message and enum types in `FilterStateValue`.
pub mod filter_state_value {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum SharedWithUpstream {
        None = 0,
        Once = 1,
        Transitive = 2,
    }
    impl SharedWithUpstream {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                SharedWithUpstream::None => "NONE",
                SharedWithUpstream::Once => "ONCE",
                SharedWithUpstream::Transitive => "TRANSITIVE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "NONE" => Some(Self::None),
                "ONCE" => Some(Self::Once),
                "TRANSITIVE" => Some(Self::Transitive),
                _ => None,
            }
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Key {
        #[prost(string, tag = "1")]
        ObjectKey(::prost::alloc::string::String),
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Value {
        #[prost(message, tag = "2")]
        FormatString(
            super::super::super::super::super::super::config::core::v3::SubstitutionFormatString,
        ),
    }
}
