// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ProcessingMode {
    #[prost(enumeration = "processing_mode::HeaderSendMode", tag = "1")]
    pub request_header_mode: i32,
    #[prost(enumeration = "processing_mode::HeaderSendMode", tag = "2")]
    pub response_header_mode: i32,
    #[prost(enumeration = "processing_mode::BodySendMode", tag = "3")]
    pub request_body_mode: i32,
    #[prost(enumeration = "processing_mode::BodySendMode", tag = "4")]
    pub response_body_mode: i32,
    #[prost(enumeration = "processing_mode::HeaderSendMode", tag = "5")]
    pub request_trailer_mode: i32,
    #[prost(enumeration = "processing_mode::HeaderSendMode", tag = "6")]
    pub response_trailer_mode: i32,
}
/// Nested message and enum types in `ProcessingMode`.
pub mod processing_mode {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum HeaderSendMode {
        Default = 0,
        Send = 1,
        Skip = 2,
    }
    impl HeaderSendMode {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                HeaderSendMode::Default => "DEFAULT",
                HeaderSendMode::Send => "SEND",
                HeaderSendMode::Skip => "SKIP",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "DEFAULT" => Some(Self::Default),
                "SEND" => Some(Self::Send),
                "SKIP" => Some(Self::Skip),
                _ => None,
            }
        }
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum BodySendMode {
        None = 0,
        Streamed = 1,
        Buffered = 2,
        BufferedPartial = 3,
    }
    impl BodySendMode {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                BodySendMode::None => "NONE",
                BodySendMode::Streamed => "STREAMED",
                BodySendMode::Buffered => "BUFFERED",
                BodySendMode::BufferedPartial => "BUFFERED_PARTIAL",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "NONE" => Some(Self::None),
                "STREAMED" => Some(Self::Streamed),
                "BUFFERED" => Some(Self::Buffered),
                "BUFFERED_PARTIAL" => Some(Self::BufferedPartial),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExternalProcessor {
    #[prost(message, optional, tag = "1")]
    pub grpc_service: ::core::option::Option<
        super::super::super::super::super::config::core::v3::GrpcService,
    >,
    #[prost(message, optional, tag = "20")]
    pub http_service: ::core::option::Option<ExtProcHttpService>,
    #[prost(bool, tag = "2")]
    pub failure_mode_allow: bool,
    #[prost(message, optional, tag = "3")]
    pub processing_mode: ::core::option::Option<ProcessingMode>,
    #[prost(string, repeated, tag = "5")]
    pub request_attributes: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "6")]
    pub response_attributes: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "7")]
    pub message_timeout: ::core::option::Option<
        super::super::super::super::super::super::google::protobuf::Duration,
    >,
    #[prost(string, tag = "8")]
    pub stat_prefix: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "9")]
    pub mutation_rules: ::core::option::Option<
        super::super::super::super::super::config::common::mutation_rules::v3::HeaderMutationRules,
    >,
    #[prost(message, optional, tag = "10")]
    pub max_message_timeout: ::core::option::Option<
        super::super::super::super::super::super::google::protobuf::Duration,
    >,
    #[prost(message, optional, tag = "12")]
    pub forward_rules: ::core::option::Option<HeaderForwardingRules>,
    #[prost(message, optional, tag = "13")]
    pub filter_metadata: ::core::option::Option<
        super::super::super::super::super::super::google::protobuf::Struct,
    >,
    #[prost(bool, tag = "14")]
    pub allow_mode_override: bool,
    #[prost(bool, tag = "15")]
    pub disable_immediate_response: bool,
    #[prost(message, optional, tag = "16")]
    pub metadata_options: ::core::option::Option<MetadataOptions>,
    #[prost(bool, tag = "17")]
    pub observability_mode: bool,
    #[prost(bool, tag = "11")]
    pub disable_clear_route_cache: bool,
    #[prost(enumeration = "external_processor::RouteCacheAction", tag = "18")]
    pub route_cache_action: i32,
    #[prost(message, optional, tag = "19")]
    pub deferred_close_timeout: ::core::option::Option<
        super::super::super::super::super::super::google::protobuf::Duration,
    >,
}
/// Nested message and enum types in `ExternalProcessor`.
pub mod external_processor {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum RouteCacheAction {
        Default = 0,
        Clear = 1,
        Retain = 2,
    }
    impl RouteCacheAction {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                RouteCacheAction::Default => "DEFAULT",
                RouteCacheAction::Clear => "CLEAR",
                RouteCacheAction::Retain => "RETAIN",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "DEFAULT" => Some(Self::Default),
                "CLEAR" => Some(Self::Clear),
                "RETAIN" => Some(Self::Retain),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExtProcHttpService {
    #[prost(message, optional, tag = "1")]
    pub http_service: ::core::option::Option<
        super::super::super::super::super::config::core::v3::HttpService,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MetadataOptions {
    #[prost(message, optional, tag = "1")]
    pub forwarding_namespaces: ::core::option::Option<
        metadata_options::MetadataNamespaces,
    >,
    #[prost(message, optional, tag = "2")]
    pub receiving_namespaces: ::core::option::Option<
        metadata_options::MetadataNamespaces,
    >,
}
/// Nested message and enum types in `MetadataOptions`.
pub mod metadata_options {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct MetadataNamespaces {
        #[prost(string, repeated, tag = "1")]
        pub untyped: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        #[prost(string, repeated, tag = "2")]
        pub typed: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeaderForwardingRules {
    #[prost(message, optional, tag = "1")]
    pub allowed_headers: ::core::option::Option<
        super::super::super::super::super::r#type::matcher::v3::ListStringMatcher,
    >,
    #[prost(message, optional, tag = "2")]
    pub disallowed_headers: ::core::option::Option<
        super::super::super::super::super::r#type::matcher::v3::ListStringMatcher,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExtProcPerRoute {
    #[prost(oneof = "ext_proc_per_route::Override", tags = "1, 2")]
    pub r#override: ::core::option::Option<ext_proc_per_route::Override>,
}
/// Nested message and enum types in `ExtProcPerRoute`.
pub mod ext_proc_per_route {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Override {
        #[prost(bool, tag = "1")]
        Disabled(bool),
        #[prost(message, tag = "2")]
        Overrides(super::ExtProcOverrides),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExtProcOverrides {
    #[prost(message, optional, tag = "1")]
    pub processing_mode: ::core::option::Option<ProcessingMode>,
    #[prost(bool, tag = "2")]
    pub async_mode: bool,
    #[prost(string, repeated, tag = "3")]
    pub request_attributes: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "4")]
    pub response_attributes: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "5")]
    pub grpc_service: ::core::option::Option<
        super::super::super::super::super::config::core::v3::GrpcService,
    >,
    #[prost(message, optional, tag = "6")]
    pub metadata_options: ::core::option::Option<MetadataOptions>,
    #[prost(message, repeated, tag = "7")]
    pub grpc_initial_metadata: ::prost::alloc::vec::Vec<
        super::super::super::super::super::config::core::v3::HeaderValue,
    >,
}
