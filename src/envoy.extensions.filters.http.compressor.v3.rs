// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Compressor {
    #[deprecated]
    #[prost(message, optional, tag = "1")]
    pub content_length: ::core::option::Option<
        super::super::super::super::super::super::google::protobuf::UInt32Value,
    >,
    #[deprecated]
    #[prost(string, repeated, tag = "2")]
    pub content_type: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[deprecated]
    #[prost(bool, tag = "3")]
    pub disable_on_etag_header: bool,
    #[deprecated]
    #[prost(bool, tag = "4")]
    pub remove_accept_encoding_header: bool,
    #[deprecated]
    #[prost(message, optional, tag = "5")]
    pub runtime_enabled: ::core::option::Option<
        super::super::super::super::super::config::core::v3::RuntimeFeatureFlag,
    >,
    #[prost(message, optional, tag = "6")]
    pub compressor_library: ::core::option::Option<
        super::super::super::super::super::config::core::v3::TypedExtensionConfig,
    >,
    #[prost(message, optional, tag = "7")]
    pub request_direction_config: ::core::option::Option<
        compressor::RequestDirectionConfig,
    >,
    #[prost(message, optional, tag = "8")]
    pub response_direction_config: ::core::option::Option<
        compressor::ResponseDirectionConfig,
    >,
    #[prost(bool, tag = "9")]
    pub choose_first: bool,
}
/// Nested message and enum types in `Compressor`.
pub mod compressor {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct CommonDirectionConfig {
        #[prost(message, optional, tag = "1")]
        pub enabled: ::core::option::Option<
            super::super::super::super::super::super::config::core::v3::RuntimeFeatureFlag,
        >,
        #[prost(message, optional, tag = "2")]
        pub min_content_length: ::core::option::Option<
            super::super::super::super::super::super::super::google::protobuf::UInt32Value,
        >,
        #[prost(string, repeated, tag = "3")]
        pub content_type: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct RequestDirectionConfig {
        #[prost(message, optional, tag = "1")]
        pub common_config: ::core::option::Option<CommonDirectionConfig>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ResponseDirectionConfig {
        #[prost(message, optional, tag = "1")]
        pub common_config: ::core::option::Option<CommonDirectionConfig>,
        #[prost(bool, tag = "2")]
        pub disable_on_etag_header: bool,
        #[prost(bool, tag = "3")]
        pub remove_accept_encoding_header: bool,
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ResponseDirectionOverrides {
    #[prost(message, optional, tag = "1")]
    pub remove_accept_encoding_header: ::core::option::Option<
        super::super::super::super::super::super::google::protobuf::BoolValue,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CompressorOverrides {
    #[prost(message, optional, tag = "1")]
    pub response_direction_config: ::core::option::Option<ResponseDirectionOverrides>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CompressorPerRoute {
    #[prost(oneof = "compressor_per_route::Override", tags = "1, 2")]
    pub r#override: ::core::option::Option<compressor_per_route::Override>,
}
/// Nested message and enum types in `CompressorPerRoute`.
pub mod compressor_per_route {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Override {
        #[prost(bool, tag = "1")]
        Disabled(bool),
        #[prost(message, tag = "2")]
        Overrides(super::CompressorOverrides),
    }
}
