// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IpTagging {
    #[prost(enumeration = "ip_tagging::RequestType", tag = "1")]
    pub request_type: i32,
    #[prost(message, repeated, tag = "4")]
    pub ip_tags: ::prost::alloc::vec::Vec<ip_tagging::IpTag>,
}
/// Nested message and enum types in `IPTagging`.
pub mod ip_tagging {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct IpTag {
        #[prost(string, tag = "1")]
        pub ip_tag_name: ::prost::alloc::string::String,
        #[prost(message, repeated, tag = "2")]
        pub ip_list: ::prost::alloc::vec::Vec<
            super::super::super::super::super::super::config::core::v3::CidrRange,
        >,
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum RequestType {
        Both = 0,
        Internal = 1,
        External = 2,
    }
    impl RequestType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                RequestType::Both => "BOTH",
                RequestType::Internal => "INTERNAL",
                RequestType::External => "EXTERNAL",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "BOTH" => Some(Self::Both),
                "INTERNAL" => Some(Self::Internal),
                "EXTERNAL" => Some(Self::External),
                _ => None,
            }
        }
    }
}
