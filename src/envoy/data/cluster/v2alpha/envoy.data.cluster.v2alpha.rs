// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OutlierDetectionEvent {
    #[prost(enumeration = "OutlierEjectionType", tag = "1")]
    pub r#type: i32,
    #[prost(message, optional, tag = "2")]
    pub timestamp: ::core::option::Option<
        super::super::super::super::google::protobuf::Timestamp,
    >,
    #[prost(message, optional, tag = "3")]
    pub secs_since_last_action: ::core::option::Option<
        super::super::super::super::google::protobuf::UInt64Value,
    >,
    #[prost(string, tag = "4")]
    pub cluster_name: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub upstream_url: ::prost::alloc::string::String,
    #[prost(enumeration = "Action", tag = "6")]
    pub action: i32,
    #[prost(uint32, tag = "7")]
    pub num_ejections: u32,
    #[prost(bool, tag = "8")]
    pub enforced: bool,
    #[prost(oneof = "outlier_detection_event::Event", tags = "9, 10, 11")]
    pub event: ::core::option::Option<outlier_detection_event::Event>,
}
/// Nested message and enum types in `OutlierDetectionEvent`.
pub mod outlier_detection_event {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Event {
        #[prost(message, tag = "9")]
        EjectSuccessRateEvent(super::OutlierEjectSuccessRate),
        #[prost(message, tag = "10")]
        EjectConsecutiveEvent(super::OutlierEjectConsecutive),
        #[prost(message, tag = "11")]
        EjectFailurePercentageEvent(super::OutlierEjectFailurePercentage),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OutlierEjectSuccessRate {
    #[prost(uint32, tag = "1")]
    pub host_success_rate: u32,
    #[prost(uint32, tag = "2")]
    pub cluster_average_success_rate: u32,
    #[prost(uint32, tag = "3")]
    pub cluster_success_rate_ejection_threshold: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OutlierEjectConsecutive {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OutlierEjectFailurePercentage {
    #[prost(uint32, tag = "1")]
    pub host_success_rate: u32,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum OutlierEjectionType {
    Consecutive5xx = 0,
    ConsecutiveGatewayFailure = 1,
    SuccessRate = 2,
    ConsecutiveLocalOriginFailure = 3,
    SuccessRateLocalOrigin = 4,
    FailurePercentage = 5,
    FailurePercentageLocalOrigin = 6,
}
impl OutlierEjectionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            OutlierEjectionType::Consecutive5xx => "CONSECUTIVE_5XX",
            OutlierEjectionType::ConsecutiveGatewayFailure => {
                "CONSECUTIVE_GATEWAY_FAILURE"
            }
            OutlierEjectionType::SuccessRate => "SUCCESS_RATE",
            OutlierEjectionType::ConsecutiveLocalOriginFailure => {
                "CONSECUTIVE_LOCAL_ORIGIN_FAILURE"
            }
            OutlierEjectionType::SuccessRateLocalOrigin => "SUCCESS_RATE_LOCAL_ORIGIN",
            OutlierEjectionType::FailurePercentage => "FAILURE_PERCENTAGE",
            OutlierEjectionType::FailurePercentageLocalOrigin => {
                "FAILURE_PERCENTAGE_LOCAL_ORIGIN"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CONSECUTIVE_5XX" => Some(Self::Consecutive5xx),
            "CONSECUTIVE_GATEWAY_FAILURE" => Some(Self::ConsecutiveGatewayFailure),
            "SUCCESS_RATE" => Some(Self::SuccessRate),
            "CONSECUTIVE_LOCAL_ORIGIN_FAILURE" => {
                Some(Self::ConsecutiveLocalOriginFailure)
            }
            "SUCCESS_RATE_LOCAL_ORIGIN" => Some(Self::SuccessRateLocalOrigin),
            "FAILURE_PERCENTAGE" => Some(Self::FailurePercentage),
            "FAILURE_PERCENTAGE_LOCAL_ORIGIN" => Some(Self::FailurePercentageLocalOrigin),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Action {
    Eject = 0,
    Uneject = 1,
}
impl Action {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Action::Eject => "EJECT",
            Action::Uneject => "UNEJECT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EJECT" => Some(Self::Eject),
            "UNEJECT" => Some(Self::Uneject),
            _ => None,
        }
    }
}
