// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LeastRequest {
    #[prost(message, optional, tag = "1")]
    pub choice_count: ::core::option::Option<
        super::super::super::super::super::google::protobuf::UInt32Value,
    >,
    #[prost(message, optional, tag = "2")]
    pub active_request_bias: ::core::option::Option<
        super::super::super::super::config::core::v3::RuntimeDouble,
    >,
    #[prost(message, optional, tag = "3")]
    pub slow_start_config: ::core::option::Option<
        super::super::common::v3::SlowStartConfig,
    >,
    #[prost(message, optional, tag = "4")]
    pub locality_lb_config: ::core::option::Option<
        super::super::common::v3::LocalityLbConfig,
    >,
    #[deprecated]
    #[prost(message, optional, tag = "5")]
    pub enable_full_scan: ::core::option::Option<
        super::super::super::super::super::google::protobuf::BoolValue,
    >,
    #[prost(enumeration = "least_request::SelectionMethod", tag = "6")]
    pub selection_method: i32,
}
/// Nested message and enum types in `LeastRequest`.
pub mod least_request {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum SelectionMethod {
        NChoices = 0,
        FullScan = 1,
    }
    impl SelectionMethod {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                SelectionMethod::NChoices => "N_CHOICES",
                SelectionMethod::FullScan => "FULL_SCAN",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "N_CHOICES" => Some(Self::NChoices),
                "FULL_SCAN" => Some(Self::FullScan),
                _ => None,
            }
        }
    }
}
