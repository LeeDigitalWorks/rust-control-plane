// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RouteConfiguration {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub interface: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub group: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub version: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "5")]
    pub routes: ::prost::alloc::vec::Vec<Route>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Route {
    #[prost(message, optional, tag = "1")]
    pub r#match: ::core::option::Option<RouteMatch>,
    #[prost(message, optional, tag = "2")]
    pub route: ::core::option::Option<RouteAction>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RouteMatch {
    #[prost(message, optional, tag = "1")]
    pub method: ::core::option::Option<MethodMatch>,
    #[prost(message, repeated, tag = "2")]
    pub headers: ::prost::alloc::vec::Vec<
        super::super::super::super::super::config::route::v3::HeaderMatcher,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RouteAction {
    #[prost(message, optional, tag = "3")]
    pub metadata_match: ::core::option::Option<
        super::super::super::super::super::config::core::v3::Metadata,
    >,
    #[prost(oneof = "route_action::ClusterSpecifier", tags = "1, 2")]
    pub cluster_specifier: ::core::option::Option<route_action::ClusterSpecifier>,
}
/// Nested message and enum types in `RouteAction`.
pub mod route_action {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ClusterSpecifier {
        #[prost(string, tag = "1")]
        Cluster(::prost::alloc::string::String),
        #[prost(message, tag = "2")]
        WeightedClusters(
            super::super::super::super::super::super::config::route::v3::WeightedCluster,
        ),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MethodMatch {
    #[prost(message, optional, tag = "1")]
    pub name: ::core::option::Option<
        super::super::super::super::super::r#type::matcher::v3::StringMatcher,
    >,
    #[prost(map = "uint32, message", tag = "2")]
    pub params_match: ::std::collections::HashMap<
        u32,
        method_match::ParameterMatchSpecifier,
    >,
}
/// Nested message and enum types in `MethodMatch`.
pub mod method_match {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ParameterMatchSpecifier {
        #[prost(
            oneof = "parameter_match_specifier::ParameterMatchSpecifier",
            tags = "3, 4"
        )]
        pub parameter_match_specifier: ::core::option::Option<
            parameter_match_specifier::ParameterMatchSpecifier,
        >,
    }
    /// Nested message and enum types in `ParameterMatchSpecifier`.
    pub mod parameter_match_specifier {
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum ParameterMatchSpecifier {
            #[prost(string, tag = "3")]
            ExactMatch(::prost::alloc::string::String),
            #[prost(message, tag = "4")]
            RangeMatch(
                super::super::super::super::super::super::super::r#type::v3::Int64Range,
            ),
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MultipleRouteConfiguration {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "4")]
    pub route_config: ::prost::alloc::vec::Vec<RouteConfiguration>,
}
