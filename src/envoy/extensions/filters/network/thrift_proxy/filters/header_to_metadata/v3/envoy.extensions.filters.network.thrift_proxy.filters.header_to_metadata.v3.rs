// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeaderToMetadata {
    #[prost(message, repeated, tag = "1")]
    pub request_rules: ::prost::alloc::vec::Vec<header_to_metadata::Rule>,
}
/// Nested message and enum types in `HeaderToMetadata`.
pub mod header_to_metadata {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct KeyValuePair {
        #[prost(string, tag = "1")]
        pub metadata_namespace: ::prost::alloc::string::String,
        #[prost(string, tag = "2")]
        pub key: ::prost::alloc::string::String,
        #[prost(enumeration = "ValueType", tag = "5")]
        pub r#type: i32,
        #[prost(enumeration = "ValueEncode", tag = "6")]
        pub encode: i32,
        #[prost(oneof = "key_value_pair::ValueType", tags = "3, 4")]
        pub value_type: ::core::option::Option<key_value_pair::ValueType>,
    }
    /// Nested message and enum types in `KeyValuePair`.
    pub mod key_value_pair {
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum ValueType {
            #[prost(string, tag = "3")]
            Value(::prost::alloc::string::String),
            #[prost(message, tag = "4")]
            RegexValueRewrite(
                super::super::super::super::super::super::super::super::super::r#type::matcher::v3::RegexMatchAndSubstitute,
            ),
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Rule {
        #[prost(string, tag = "1")]
        pub header: ::prost::alloc::string::String,
        #[prost(message, optional, tag = "2")]
        pub on_present: ::core::option::Option<KeyValuePair>,
        #[prost(message, optional, tag = "3")]
        pub on_missing: ::core::option::Option<KeyValuePair>,
        #[prost(bool, tag = "4")]
        pub remove: bool,
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ValueType {
        String = 0,
        Number = 1,
        ProtobufValue = 2,
    }
    impl ValueType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                ValueType::String => "STRING",
                ValueType::Number => "NUMBER",
                ValueType::ProtobufValue => "PROTOBUF_VALUE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STRING" => Some(Self::String),
                "NUMBER" => Some(Self::Number),
                "PROTOBUF_VALUE" => Some(Self::ProtobufValue),
                _ => None,
            }
        }
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ValueEncode {
        None = 0,
        Base64 = 1,
    }
    impl ValueEncode {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                ValueEncode::None => "NONE",
                ValueEncode::Base64 => "BASE64",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "NONE" => Some(Self::None),
                "BASE64" => Some(Self::Base64),
                _ => None,
            }
        }
    }
}
