// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExtAuthz {
    #[prost(
        enumeration = "super::super::super::super::super::config::core::v3::ApiVersion",
        tag = "12"
    )]
    pub transport_api_version: i32,
    #[prost(bool, tag = "2")]
    pub failure_mode_allow: bool,
    #[prost(bool, tag = "19")]
    pub failure_mode_allow_header_add: bool,
    #[prost(message, optional, tag = "5")]
    pub with_request_body: ::core::option::Option<BufferSettings>,
    #[prost(bool, tag = "6")]
    pub clear_route_cache: bool,
    #[prost(message, optional, tag = "7")]
    pub status_on_error: ::core::option::Option<
        super::super::super::super::super::r#type::v3::HttpStatus,
    >,
    #[prost(bool, tag = "24")]
    pub validate_mutations: bool,
    #[prost(string, repeated, tag = "8")]
    pub metadata_context_namespaces: ::prost::alloc::vec::Vec<
        ::prost::alloc::string::String,
    >,
    #[prost(string, repeated, tag = "16")]
    pub typed_metadata_context_namespaces: ::prost::alloc::vec::Vec<
        ::prost::alloc::string::String,
    >,
    #[prost(string, repeated, tag = "21")]
    pub route_metadata_context_namespaces: ::prost::alloc::vec::Vec<
        ::prost::alloc::string::String,
    >,
    #[prost(string, repeated, tag = "22")]
    pub route_typed_metadata_context_namespaces: ::prost::alloc::vec::Vec<
        ::prost::alloc::string::String,
    >,
    #[prost(message, optional, tag = "9")]
    pub filter_enabled: ::core::option::Option<
        super::super::super::super::super::config::core::v3::RuntimeFractionalPercent,
    >,
    #[prost(message, optional, tag = "14")]
    pub filter_enabled_metadata: ::core::option::Option<
        super::super::super::super::super::r#type::matcher::v3::MetadataMatcher,
    >,
    #[prost(message, optional, tag = "11")]
    pub deny_at_disable: ::core::option::Option<
        super::super::super::super::super::config::core::v3::RuntimeFeatureFlag,
    >,
    #[prost(bool, tag = "10")]
    pub include_peer_certificate: bool,
    #[prost(string, tag = "13")]
    pub stat_prefix: ::prost::alloc::string::String,
    #[prost(string, tag = "15")]
    pub bootstrap_metadata_labels_key: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "17")]
    pub allowed_headers: ::core::option::Option<
        super::super::super::super::super::r#type::matcher::v3::ListStringMatcher,
    >,
    #[prost(message, optional, tag = "25")]
    pub disallowed_headers: ::core::option::Option<
        super::super::super::super::super::r#type::matcher::v3::ListStringMatcher,
    >,
    #[prost(bool, tag = "18")]
    pub include_tls_session: bool,
    #[prost(message, optional, tag = "20")]
    pub charge_cluster_response_stats: ::core::option::Option<
        super::super::super::super::super::super::google::protobuf::BoolValue,
    >,
    #[prost(bool, tag = "23")]
    pub encode_raw_headers: bool,
    #[prost(message, optional, tag = "26")]
    pub decoder_header_mutation_rules: ::core::option::Option<
        super::super::super::super::super::config::common::mutation_rules::v3::HeaderMutationRules,
    >,
    #[prost(message, optional, tag = "27")]
    pub enable_dynamic_metadata_ingestion: ::core::option::Option<
        super::super::super::super::super::super::google::protobuf::BoolValue,
    >,
    #[prost(message, optional, tag = "28")]
    pub filter_metadata: ::core::option::Option<
        super::super::super::super::super::super::google::protobuf::Struct,
    >,
    #[prost(oneof = "ext_authz::Services", tags = "1, 3")]
    pub services: ::core::option::Option<ext_authz::Services>,
}
/// Nested message and enum types in `ExtAuthz`.
pub mod ext_authz {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Services {
        #[prost(message, tag = "1")]
        GrpcService(
            super::super::super::super::super::super::config::core::v3::GrpcService,
        ),
        #[prost(message, tag = "3")]
        HttpService(super::HttpService),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BufferSettings {
    #[prost(uint32, tag = "1")]
    pub max_request_bytes: u32,
    #[prost(bool, tag = "2")]
    pub allow_partial_message: bool,
    #[prost(bool, tag = "3")]
    pub pack_as_bytes: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HttpService {
    #[prost(message, optional, tag = "1")]
    pub server_uri: ::core::option::Option<
        super::super::super::super::super::config::core::v3::HttpUri,
    >,
    #[prost(string, tag = "2")]
    pub path_prefix: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "7")]
    pub authorization_request: ::core::option::Option<AuthorizationRequest>,
    #[prost(message, optional, tag = "8")]
    pub authorization_response: ::core::option::Option<AuthorizationResponse>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthorizationRequest {
    #[deprecated]
    #[prost(message, optional, tag = "1")]
    pub allowed_headers: ::core::option::Option<
        super::super::super::super::super::r#type::matcher::v3::ListStringMatcher,
    >,
    #[prost(message, repeated, tag = "2")]
    pub headers_to_add: ::prost::alloc::vec::Vec<
        super::super::super::super::super::config::core::v3::HeaderValue,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthorizationResponse {
    #[prost(message, optional, tag = "1")]
    pub allowed_upstream_headers: ::core::option::Option<
        super::super::super::super::super::r#type::matcher::v3::ListStringMatcher,
    >,
    #[prost(message, optional, tag = "3")]
    pub allowed_upstream_headers_to_append: ::core::option::Option<
        super::super::super::super::super::r#type::matcher::v3::ListStringMatcher,
    >,
    #[prost(message, optional, tag = "2")]
    pub allowed_client_headers: ::core::option::Option<
        super::super::super::super::super::r#type::matcher::v3::ListStringMatcher,
    >,
    #[prost(message, optional, tag = "4")]
    pub allowed_client_headers_on_success: ::core::option::Option<
        super::super::super::super::super::r#type::matcher::v3::ListStringMatcher,
    >,
    #[prost(message, optional, tag = "5")]
    pub dynamic_metadata_from_headers: ::core::option::Option<
        super::super::super::super::super::r#type::matcher::v3::ListStringMatcher,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExtAuthzPerRoute {
    #[prost(oneof = "ext_authz_per_route::Override", tags = "1, 2")]
    pub r#override: ::core::option::Option<ext_authz_per_route::Override>,
}
/// Nested message and enum types in `ExtAuthzPerRoute`.
pub mod ext_authz_per_route {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Override {
        #[prost(bool, tag = "1")]
        Disabled(bool),
        #[prost(message, tag = "2")]
        CheckSettings(super::CheckSettings),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CheckSettings {
    #[prost(map = "string, string", tag = "1")]
    pub context_extensions: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(bool, tag = "2")]
    pub disable_request_body_buffering: bool,
    #[prost(message, optional, tag = "3")]
    pub with_request_body: ::core::option::Option<BufferSettings>,
}
