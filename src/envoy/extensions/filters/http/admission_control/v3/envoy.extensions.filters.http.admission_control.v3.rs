// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdmissionControl {
    #[prost(message, optional, tag = "1")]
    pub enabled: ::core::option::Option<
        super::super::super::super::super::config::core::v3::RuntimeFeatureFlag,
    >,
    #[prost(message, optional, tag = "3")]
    pub sampling_window: ::core::option::Option<
        super::super::super::super::super::super::google::protobuf::Duration,
    >,
    #[prost(message, optional, tag = "4")]
    pub aggression: ::core::option::Option<
        super::super::super::super::super::config::core::v3::RuntimeDouble,
    >,
    #[prost(message, optional, tag = "5")]
    pub sr_threshold: ::core::option::Option<
        super::super::super::super::super::config::core::v3::RuntimePercent,
    >,
    #[prost(message, optional, tag = "6")]
    pub rps_threshold: ::core::option::Option<
        super::super::super::super::super::config::core::v3::RuntimeUInt32,
    >,
    #[prost(message, optional, tag = "7")]
    pub max_rejection_probability: ::core::option::Option<
        super::super::super::super::super::config::core::v3::RuntimePercent,
    >,
    #[prost(oneof = "admission_control::EvaluationCriteria", tags = "2")]
    pub evaluation_criteria: ::core::option::Option<
        admission_control::EvaluationCriteria,
    >,
}
/// Nested message and enum types in `AdmissionControl`.
pub mod admission_control {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct SuccessCriteria {
        #[prost(message, optional, tag = "1")]
        pub http_criteria: ::core::option::Option<success_criteria::HttpCriteria>,
        #[prost(message, optional, tag = "2")]
        pub grpc_criteria: ::core::option::Option<success_criteria::GrpcCriteria>,
    }
    /// Nested message and enum types in `SuccessCriteria`.
    pub mod success_criteria {
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct HttpCriteria {
            #[prost(message, repeated, tag = "1")]
            pub http_success_status: ::prost::alloc::vec::Vec<
                super::super::super::super::super::super::super::r#type::v3::Int32Range,
            >,
        }
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct GrpcCriteria {
            #[prost(uint32, repeated, packed = "false", tag = "1")]
            pub grpc_success_status: ::prost::alloc::vec::Vec<u32>,
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum EvaluationCriteria {
        #[prost(message, tag = "2")]
        SuccessCriteria(SuccessCriteria),
    }
}
