// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KeyValuePair {
    #[prost(string, tag = "1")]
    pub metadata_namespace: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub key: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub value: ::core::option::Option<
        super::super::super::super::super::super::google::protobuf::Value,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FieldSelector {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub id: i32,
    #[prost(message, optional, boxed, tag = "3")]
    pub child: ::core::option::Option<::prost::alloc::boxed::Box<FieldSelector>>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Rule {
    #[prost(enumeration = "Field", tag = "1")]
    pub field: i32,
    #[prost(message, optional, tag = "2")]
    pub field_selector: ::core::option::Option<FieldSelector>,
    #[prost(string, tag = "3")]
    pub method_name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub on_present: ::core::option::Option<KeyValuePair>,
    #[prost(message, optional, tag = "5")]
    pub on_missing: ::core::option::Option<KeyValuePair>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ThriftToMetadata {
    #[prost(message, repeated, tag = "1")]
    pub request_rules: ::prost::alloc::vec::Vec<Rule>,
    #[prost(message, repeated, tag = "2")]
    pub response_rules: ::prost::alloc::vec::Vec<Rule>,
    #[prost(
        enumeration = "super::super::super::network::thrift_proxy::v3::TransportType",
        tag = "3"
    )]
    pub transport: i32,
    #[prost(
        enumeration = "super::super::super::network::thrift_proxy::v3::ProtocolType",
        tag = "4"
    )]
    pub protocol: i32,
    #[prost(string, repeated, tag = "5")]
    pub allow_content_types: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag = "6")]
    pub allow_empty_content_type: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ThriftToMetadataPerRoute {
    #[prost(message, repeated, tag = "1")]
    pub request_rules: ::prost::alloc::vec::Vec<Rule>,
    #[prost(message, repeated, tag = "2")]
    pub response_rules: ::prost::alloc::vec::Vec<Rule>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Field {
    MethodName = 0,
    Protocol = 1,
    Transport = 2,
    HeaderFlags = 3,
    SequenceId = 4,
    MessageType = 5,
    ReplyType = 6,
}
impl Field {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Field::MethodName => "METHOD_NAME",
            Field::Protocol => "PROTOCOL",
            Field::Transport => "TRANSPORT",
            Field::HeaderFlags => "HEADER_FLAGS",
            Field::SequenceId => "SEQUENCE_ID",
            Field::MessageType => "MESSAGE_TYPE",
            Field::ReplyType => "REPLY_TYPE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "METHOD_NAME" => Some(Self::MethodName),
            "PROTOCOL" => Some(Self::Protocol),
            "TRANSPORT" => Some(Self::Transport),
            "HEADER_FLAGS" => Some(Self::HeaderFlags),
            "SEQUENCE_ID" => Some(Self::SequenceId),
            "MESSAGE_TYPE" => Some(Self::MessageType),
            "REPLY_TYPE" => Some(Self::ReplyType),
            _ => None,
        }
    }
}
