// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GrpcJsonTranscoder {
    #[prost(string, repeated, tag = "2")]
    pub services: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "3")]
    pub print_options: ::core::option::Option<grpc_json_transcoder::PrintOptions>,
    #[prost(bool, tag = "5")]
    pub match_incoming_request_route: bool,
    #[prost(string, repeated, tag = "6")]
    pub ignored_query_parameters: ::prost::alloc::vec::Vec<
        ::prost::alloc::string::String,
    >,
    #[prost(bool, tag = "7")]
    pub auto_mapping: bool,
    #[prost(bool, tag = "8")]
    pub ignore_unknown_query_parameters: bool,
    #[prost(bool, tag = "9")]
    pub convert_grpc_status: bool,
    #[prost(enumeration = "grpc_json_transcoder::UrlUnescapeSpec", tag = "10")]
    pub url_unescape_spec: i32,
    #[prost(bool, tag = "12")]
    pub query_param_unescape_plus: bool,
    #[prost(bool, tag = "13")]
    pub match_unregistered_custom_verb: bool,
    #[prost(message, optional, tag = "11")]
    pub request_validation_options: ::core::option::Option<
        grpc_json_transcoder::RequestValidationOptions,
    >,
    #[prost(bool, tag = "14")]
    pub case_insensitive_enum_parsing: bool,
    #[prost(message, optional, tag = "15")]
    pub max_request_body_size: ::core::option::Option<
        super::super::super::super::super::super::google::protobuf::UInt32Value,
    >,
    #[prost(message, optional, tag = "16")]
    pub max_response_body_size: ::core::option::Option<
        super::super::super::super::super::super::google::protobuf::UInt32Value,
    >,
    #[prost(bool, tag = "17")]
    pub capture_unknown_query_parameters: bool,
    #[prost(oneof = "grpc_json_transcoder::DescriptorSet", tags = "1, 4")]
    pub descriptor_set: ::core::option::Option<grpc_json_transcoder::DescriptorSet>,
}
/// Nested message and enum types in `GrpcJsonTranscoder`.
pub mod grpc_json_transcoder {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct PrintOptions {
        #[prost(bool, tag = "1")]
        pub add_whitespace: bool,
        #[prost(bool, tag = "2")]
        pub always_print_primitive_fields: bool,
        #[prost(bool, tag = "3")]
        pub always_print_enums_as_ints: bool,
        #[prost(bool, tag = "4")]
        pub preserve_proto_field_names: bool,
        #[prost(bool, tag = "5")]
        pub stream_newline_delimited: bool,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct RequestValidationOptions {
        #[prost(bool, tag = "1")]
        pub reject_unknown_method: bool,
        #[prost(bool, tag = "2")]
        pub reject_unknown_query_parameters: bool,
        #[prost(bool, tag = "3")]
        pub reject_binding_body_field_collisions: bool,
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum UrlUnescapeSpec {
        AllCharactersExceptReserved = 0,
        AllCharactersExceptSlash = 1,
        AllCharacters = 2,
    }
    impl UrlUnescapeSpec {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                UrlUnescapeSpec::AllCharactersExceptReserved => {
                    "ALL_CHARACTERS_EXCEPT_RESERVED"
                }
                UrlUnescapeSpec::AllCharactersExceptSlash => {
                    "ALL_CHARACTERS_EXCEPT_SLASH"
                }
                UrlUnescapeSpec::AllCharacters => "ALL_CHARACTERS",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "ALL_CHARACTERS_EXCEPT_RESERVED" => {
                    Some(Self::AllCharactersExceptReserved)
                }
                "ALL_CHARACTERS_EXCEPT_SLASH" => Some(Self::AllCharactersExceptSlash),
                "ALL_CHARACTERS" => Some(Self::AllCharacters),
                _ => None,
            }
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum DescriptorSet {
        #[prost(string, tag = "1")]
        ProtoDescriptor(::prost::alloc::string::String),
        #[prost(bytes, tag = "4")]
        ProtoDescriptorBin(::prost::alloc::vec::Vec<u8>),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnknownQueryParams {
    #[prost(map = "string, message", tag = "1")]
    pub key: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        unknown_query_params::Values,
    >,
}
/// Nested message and enum types in `UnknownQueryParams`.
pub mod unknown_query_params {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Values {
        #[prost(string, repeated, tag = "1")]
        pub values: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    }
}
