// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProxyProtocolPassThroughTlVs {
    #[prost(
        enumeration = "proxy_protocol_pass_through_tl_vs::PassTlVsMatchType",
        tag = "1"
    )]
    pub match_type: i32,
    #[prost(uint32, repeated, packed = "false", tag = "2")]
    pub tlv_type: ::prost::alloc::vec::Vec<u32>,
}
/// Nested message and enum types in `ProxyProtocolPassThroughTLVs`.
pub mod proxy_protocol_pass_through_tl_vs {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum PassTlVsMatchType {
        IncludeAll = 0,
        Include = 1,
    }
    impl PassTlVsMatchType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                PassTlVsMatchType::IncludeAll => "INCLUDE_ALL",
                PassTlVsMatchType::Include => "INCLUDE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "INCLUDE_ALL" => Some(Self::IncludeAll),
                "INCLUDE" => Some(Self::Include),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProxyProtocolConfig {
    #[prost(enumeration = "proxy_protocol_config::Version", tag = "1")]
    pub version: i32,
    #[prost(message, optional, tag = "2")]
    pub pass_through_tlvs: ::core::option::Option<ProxyProtocolPassThroughTlVs>,
}
/// Nested message and enum types in `ProxyProtocolConfig`.
pub mod proxy_protocol_config {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Version {
        V1 = 0,
        V2 = 1,
    }
    impl Version {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Version::V1 => "V1",
                Version::V2 => "V2",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "V1" => Some(Self::V1),
                "V2" => Some(Self::V2),
                _ => None,
            }
        }
    }
}
