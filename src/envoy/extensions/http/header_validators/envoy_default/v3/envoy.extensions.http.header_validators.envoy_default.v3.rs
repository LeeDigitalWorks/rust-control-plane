// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeaderValidatorConfig {
    #[prost(message, optional, tag = "1")]
    pub http1_protocol_options: ::core::option::Option<
        header_validator_config::Http1ProtocolOptions,
    >,
    #[prost(message, optional, tag = "2")]
    pub uri_path_normalization_options: ::core::option::Option<
        header_validator_config::UriPathNormalizationOptions,
    >,
    #[prost(bool, tag = "3")]
    pub restrict_http_methods: bool,
    #[prost(
        enumeration = "header_validator_config::HeadersWithUnderscoresAction",
        tag = "4"
    )]
    pub headers_with_underscores_action: i32,
    #[prost(bool, tag = "5")]
    pub strip_fragment_from_path: bool,
}
/// Nested message and enum types in `HeaderValidatorConfig`.
pub mod header_validator_config {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct UriPathNormalizationOptions {
        #[prost(bool, tag = "1")]
        pub skip_path_normalization: bool,
        #[prost(bool, tag = "2")]
        pub skip_merging_slashes: bool,
        #[prost(
            enumeration = "uri_path_normalization_options::PathWithEscapedSlashesAction",
            tag = "3"
        )]
        pub path_with_escaped_slashes_action: i32,
    }
    /// Nested message and enum types in `UriPathNormalizationOptions`.
    pub mod uri_path_normalization_options {
        #[derive(
            Clone,
            Copy,
            Debug,
            PartialEq,
            Eq,
            Hash,
            PartialOrd,
            Ord,
            ::prost::Enumeration
        )]
        #[repr(i32)]
        pub enum PathWithEscapedSlashesAction {
            ImplementationSpecificDefault = 0,
            KeepUnchanged = 1,
            RejectRequest = 2,
            UnescapeAndRedirect = 3,
            UnescapeAndForward = 4,
        }
        impl PathWithEscapedSlashesAction {
            /// String value of the enum field names used in the ProtoBuf definition.
            ///
            /// The values are not transformed in any way and thus are considered stable
            /// (if the ProtoBuf definition does not change) and safe for programmatic use.
            pub fn as_str_name(&self) -> &'static str {
                match self {
                    PathWithEscapedSlashesAction::ImplementationSpecificDefault => {
                        "IMPLEMENTATION_SPECIFIC_DEFAULT"
                    }
                    PathWithEscapedSlashesAction::KeepUnchanged => "KEEP_UNCHANGED",
                    PathWithEscapedSlashesAction::RejectRequest => "REJECT_REQUEST",
                    PathWithEscapedSlashesAction::UnescapeAndRedirect => {
                        "UNESCAPE_AND_REDIRECT"
                    }
                    PathWithEscapedSlashesAction::UnescapeAndForward => {
                        "UNESCAPE_AND_FORWARD"
                    }
                }
            }
            /// Creates an enum from field names used in the ProtoBuf definition.
            pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
                match value {
                    "IMPLEMENTATION_SPECIFIC_DEFAULT" => {
                        Some(Self::ImplementationSpecificDefault)
                    }
                    "KEEP_UNCHANGED" => Some(Self::KeepUnchanged),
                    "REJECT_REQUEST" => Some(Self::RejectRequest),
                    "UNESCAPE_AND_REDIRECT" => Some(Self::UnescapeAndRedirect),
                    "UNESCAPE_AND_FORWARD" => Some(Self::UnescapeAndForward),
                    _ => None,
                }
            }
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Http1ProtocolOptions {
        #[prost(bool, tag = "1")]
        pub allow_chunked_length: bool,
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum HeadersWithUnderscoresAction {
        Allow = 0,
        RejectRequest = 1,
        DropHeader = 2,
    }
    impl HeadersWithUnderscoresAction {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                HeadersWithUnderscoresAction::Allow => "ALLOW",
                HeadersWithUnderscoresAction::RejectRequest => "REJECT_REQUEST",
                HeadersWithUnderscoresAction::DropHeader => "DROP_HEADER",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "ALLOW" => Some(Self::Allow),
                "REJECT_REQUEST" => Some(Self::RejectRequest),
                "DROP_HEADER" => Some(Self::DropHeader),
                _ => None,
            }
        }
    }
}
