// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FaultDelay {
    #[deprecated]
    #[prost(enumeration = "fault_delay::FaultDelayType", tag = "1")]
    pub r#type: i32,
    #[prost(message, optional, tag = "4")]
    pub percentage: ::core::option::Option<
        super::super::super::super::r#type::FractionalPercent,
    >,
    #[prost(oneof = "fault_delay::FaultDelaySecifier", tags = "3, 5")]
    pub fault_delay_secifier: ::core::option::Option<fault_delay::FaultDelaySecifier>,
}
/// Nested message and enum types in `FaultDelay`.
pub mod fault_delay {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct HeaderDelay {}
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum FaultDelayType {
        Fixed = 0,
    }
    impl FaultDelayType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                FaultDelayType::Fixed => "FIXED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "FIXED" => Some(Self::Fixed),
                _ => None,
            }
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum FaultDelaySecifier {
        #[prost(message, tag = "3")]
        FixedDelay(super::super::super::super::super::super::google::protobuf::Duration),
        #[prost(message, tag = "5")]
        HeaderDelay(HeaderDelay),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FaultRateLimit {
    #[prost(message, optional, tag = "2")]
    pub percentage: ::core::option::Option<
        super::super::super::super::r#type::FractionalPercent,
    >,
    #[prost(oneof = "fault_rate_limit::LimitType", tags = "1, 3")]
    pub limit_type: ::core::option::Option<fault_rate_limit::LimitType>,
}
/// Nested message and enum types in `FaultRateLimit`.
pub mod fault_rate_limit {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct FixedLimit {
        #[prost(uint64, tag = "1")]
        pub limit_kbps: u64,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct HeaderLimit {}
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum LimitType {
        #[prost(message, tag = "1")]
        FixedLimit(FixedLimit),
        #[prost(message, tag = "3")]
        HeaderLimit(HeaderLimit),
    }
}
