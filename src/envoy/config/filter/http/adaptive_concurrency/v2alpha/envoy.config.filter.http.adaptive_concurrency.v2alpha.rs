// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GradientControllerConfig {
    #[prost(message, optional, tag = "1")]
    pub sample_aggregate_percentile: ::core::option::Option<
        super::super::super::super::super::r#type::Percent,
    >,
    #[prost(message, optional, tag = "2")]
    pub concurrency_limit_params: ::core::option::Option<
        gradient_controller_config::ConcurrencyLimitCalculationParams,
    >,
    #[prost(message, optional, tag = "3")]
    pub min_rtt_calc_params: ::core::option::Option<
        gradient_controller_config::MinimumRttCalculationParams,
    >,
}
/// Nested message and enum types in `GradientControllerConfig`.
pub mod gradient_controller_config {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct ConcurrencyLimitCalculationParams {
        #[prost(message, optional, tag = "2")]
        pub max_concurrency_limit: ::core::option::Option<
            super::super::super::super::super::super::super::google::protobuf::UInt32Value,
        >,
        #[prost(message, optional, tag = "3")]
        pub concurrency_update_interval: ::core::option::Option<
            super::super::super::super::super::super::super::google::protobuf::Duration,
        >,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct MinimumRttCalculationParams {
        #[prost(message, optional, tag = "1")]
        pub interval: ::core::option::Option<
            super::super::super::super::super::super::super::google::protobuf::Duration,
        >,
        #[prost(message, optional, tag = "2")]
        pub request_count: ::core::option::Option<
            super::super::super::super::super::super::super::google::protobuf::UInt32Value,
        >,
        #[prost(message, optional, tag = "3")]
        pub jitter: ::core::option::Option<
            super::super::super::super::super::super::r#type::Percent,
        >,
        #[prost(message, optional, tag = "4")]
        pub min_concurrency: ::core::option::Option<
            super::super::super::super::super::super::super::google::protobuf::UInt32Value,
        >,
        #[prost(message, optional, tag = "5")]
        pub buffer: ::core::option::Option<
            super::super::super::super::super::super::r#type::Percent,
        >,
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdaptiveConcurrency {
    #[prost(message, optional, tag = "2")]
    pub enabled: ::core::option::Option<
        super::super::super::super::super::api::v2::core::RuntimeFeatureFlag,
    >,
    #[prost(oneof = "adaptive_concurrency::ConcurrencyControllerConfig", tags = "1")]
    pub concurrency_controller_config: ::core::option::Option<
        adaptive_concurrency::ConcurrencyControllerConfig,
    >,
}
/// Nested message and enum types in `AdaptiveConcurrency`.
pub mod adaptive_concurrency {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum ConcurrencyControllerConfig {
        #[prost(message, tag = "1")]
        GradientControllerConfig(super::GradientControllerConfig),
    }
}
