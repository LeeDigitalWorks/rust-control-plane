// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gzip {
    #[prost(message, optional, tag = "1")]
    pub memory_level: ::core::option::Option<
        super::super::super::super::super::super::google::protobuf::UInt32Value,
    >,
    #[deprecated]
    #[prost(message, optional, tag = "2")]
    pub content_length: ::core::option::Option<
        super::super::super::super::super::super::google::protobuf::UInt32Value,
    >,
    #[prost(enumeration = "gzip::compression_level::Enum", tag = "3")]
    pub compression_level: i32,
    #[prost(enumeration = "gzip::CompressionStrategy", tag = "4")]
    pub compression_strategy: i32,
    #[deprecated]
    #[prost(string, repeated, tag = "6")]
    pub content_type: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[deprecated]
    #[prost(bool, tag = "7")]
    pub disable_on_etag_header: bool,
    #[deprecated]
    #[prost(bool, tag = "8")]
    pub remove_accept_encoding_header: bool,
    #[prost(message, optional, tag = "9")]
    pub window_bits: ::core::option::Option<
        super::super::super::super::super::super::google::protobuf::UInt32Value,
    >,
    #[prost(message, optional, tag = "10")]
    pub compressor: ::core::option::Option<super::super::compressor::v2::Compressor>,
}
/// Nested message and enum types in `Gzip`.
pub mod gzip {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct CompressionLevel {}
    /// Nested message and enum types in `CompressionLevel`.
    pub mod compression_level {
        #[derive(
            Clone,
            Copy,
            Debug,
            PartialEq,
            Eq,
            Hash,
            PartialOrd,
            Ord,
            ::prost::Enumeration
        )]
        #[repr(i32)]
        pub enum Enum {
            Default = 0,
            Best = 1,
            Speed = 2,
        }
        impl Enum {
            /// String value of the enum field names used in the ProtoBuf definition.
            ///
            /// The values are not transformed in any way and thus are considered stable
            /// (if the ProtoBuf definition does not change) and safe for programmatic use.
            pub fn as_str_name(&self) -> &'static str {
                match self {
                    Enum::Default => "DEFAULT",
                    Enum::Best => "BEST",
                    Enum::Speed => "SPEED",
                }
            }
            /// Creates an enum from field names used in the ProtoBuf definition.
            pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
                match value {
                    "DEFAULT" => Some(Self::Default),
                    "BEST" => Some(Self::Best),
                    "SPEED" => Some(Self::Speed),
                    _ => None,
                }
            }
        }
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum CompressionStrategy {
        Default = 0,
        Filtered = 1,
        Huffman = 2,
        Rle = 3,
    }
    impl CompressionStrategy {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                CompressionStrategy::Default => "DEFAULT",
                CompressionStrategy::Filtered => "FILTERED",
                CompressionStrategy::Huffman => "HUFFMAN",
                CompressionStrategy::Rle => "RLE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "DEFAULT" => Some(Self::Default),
                "FILTERED" => Some(Self::Filtered),
                "HUFFMAN" => Some(Self::Huffman),
                "RLE" => Some(Self::Rle),
                _ => None,
            }
        }
    }
}
