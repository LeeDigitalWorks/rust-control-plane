// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bootstrap {
    #[prost(message, optional, tag = "1")]
    pub node: ::core::option::Option<super::super::super::api::v2::core::Node>,
    #[prost(message, optional, tag = "2")]
    pub static_resources: ::core::option::Option<bootstrap::StaticResources>,
    #[prost(message, optional, tag = "3")]
    pub dynamic_resources: ::core::option::Option<bootstrap::DynamicResources>,
    #[prost(message, optional, tag = "4")]
    pub cluster_manager: ::core::option::Option<ClusterManager>,
    #[prost(message, optional, tag = "14")]
    pub hds_config: ::core::option::Option<
        super::super::super::api::v2::core::ApiConfigSource,
    >,
    #[prost(string, tag = "5")]
    pub flags_path: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "6")]
    pub stats_sinks: ::prost::alloc::vec::Vec<super::super::metrics::v2::StatsSink>,
    #[prost(message, optional, tag = "13")]
    pub stats_config: ::core::option::Option<super::super::metrics::v2::StatsConfig>,
    #[prost(message, optional, tag = "7")]
    pub stats_flush_interval: ::core::option::Option<
        super::super::super::super::google::protobuf::Duration,
    >,
    #[prost(message, optional, tag = "8")]
    pub watchdog: ::core::option::Option<Watchdog>,
    #[prost(message, optional, tag = "9")]
    pub tracing: ::core::option::Option<super::super::trace::v2::Tracing>,
    #[deprecated]
    #[prost(message, optional, tag = "11")]
    pub runtime: ::core::option::Option<Runtime>,
    #[prost(message, optional, tag = "17")]
    pub layered_runtime: ::core::option::Option<LayeredRuntime>,
    #[prost(message, optional, tag = "12")]
    pub admin: ::core::option::Option<Admin>,
    #[prost(message, optional, tag = "15")]
    pub overload_manager: ::core::option::Option<
        super::super::overload::v2alpha::OverloadManager,
    >,
    #[prost(bool, tag = "16")]
    pub enable_dispatcher_stats: bool,
    #[prost(string, tag = "18")]
    pub header_prefix: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "19")]
    pub stats_server_version_override: ::core::option::Option<
        super::super::super::super::google::protobuf::UInt64Value,
    >,
    #[prost(bool, tag = "20")]
    pub use_tcp_for_dns_lookups: bool,
}
/// Nested message and enum types in `Bootstrap`.
pub mod bootstrap {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct StaticResources {
        #[prost(message, repeated, tag = "1")]
        pub listeners: ::prost::alloc::vec::Vec<
            super::super::super::super::api::v2::Listener,
        >,
        #[prost(message, repeated, tag = "2")]
        pub clusters: ::prost::alloc::vec::Vec<
            super::super::super::super::api::v2::Cluster,
        >,
        #[prost(message, repeated, tag = "3")]
        pub secrets: ::prost::alloc::vec::Vec<
            super::super::super::super::api::v2::auth::Secret,
        >,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct DynamicResources {
        #[prost(message, optional, tag = "1")]
        pub lds_config: ::core::option::Option<
            super::super::super::super::api::v2::core::ConfigSource,
        >,
        #[prost(message, optional, tag = "2")]
        pub cds_config: ::core::option::Option<
            super::super::super::super::api::v2::core::ConfigSource,
        >,
        #[prost(message, optional, tag = "3")]
        pub ads_config: ::core::option::Option<
            super::super::super::super::api::v2::core::ApiConfigSource,
        >,
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Admin {
    #[prost(string, tag = "1")]
    pub access_log_path: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub profile_path: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub address: ::core::option::Option<super::super::super::api::v2::core::Address>,
    #[prost(message, repeated, tag = "4")]
    pub socket_options: ::prost::alloc::vec::Vec<
        super::super::super::api::v2::core::SocketOption,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClusterManager {
    #[prost(string, tag = "1")]
    pub local_cluster_name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub outlier_detection: ::core::option::Option<cluster_manager::OutlierDetection>,
    #[prost(message, optional, tag = "3")]
    pub upstream_bind_config: ::core::option::Option<
        super::super::super::api::v2::core::BindConfig,
    >,
    #[prost(message, optional, tag = "4")]
    pub load_stats_config: ::core::option::Option<
        super::super::super::api::v2::core::ApiConfigSource,
    >,
}
/// Nested message and enum types in `ClusterManager`.
pub mod cluster_manager {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct OutlierDetection {
        #[prost(string, tag = "1")]
        pub event_log_path: ::prost::alloc::string::String,
        #[prost(message, optional, tag = "2")]
        pub event_service: ::core::option::Option<
            super::super::super::super::api::v2::core::EventServiceConfig,
        >,
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Watchdog {
    #[prost(message, optional, tag = "1")]
    pub miss_timeout: ::core::option::Option<
        super::super::super::super::google::protobuf::Duration,
    >,
    #[prost(message, optional, tag = "2")]
    pub megamiss_timeout: ::core::option::Option<
        super::super::super::super::google::protobuf::Duration,
    >,
    #[prost(message, optional, tag = "3")]
    pub kill_timeout: ::core::option::Option<
        super::super::super::super::google::protobuf::Duration,
    >,
    #[prost(message, optional, tag = "4")]
    pub multikill_timeout: ::core::option::Option<
        super::super::super::super::google::protobuf::Duration,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Runtime {
    #[prost(string, tag = "1")]
    pub symlink_root: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub subdirectory: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub override_subdirectory: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub base: ::core::option::Option<
        super::super::super::super::google::protobuf::Struct,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RuntimeLayer {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(oneof = "runtime_layer::LayerSpecifier", tags = "2, 3, 4, 5")]
    pub layer_specifier: ::core::option::Option<runtime_layer::LayerSpecifier>,
}
/// Nested message and enum types in `RuntimeLayer`.
pub mod runtime_layer {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct DiskLayer {
        #[prost(string, tag = "1")]
        pub symlink_root: ::prost::alloc::string::String,
        #[prost(string, tag = "3")]
        pub subdirectory: ::prost::alloc::string::String,
        #[prost(bool, tag = "2")]
        pub append_service_cluster: bool,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct AdminLayer {}
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct RtdsLayer {
        #[prost(string, tag = "1")]
        pub name: ::prost::alloc::string::String,
        #[prost(message, optional, tag = "2")]
        pub rtds_config: ::core::option::Option<
            super::super::super::super::api::v2::core::ConfigSource,
        >,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum LayerSpecifier {
        #[prost(message, tag = "2")]
        StaticLayer(super::super::super::super::super::google::protobuf::Struct),
        #[prost(message, tag = "3")]
        DiskLayer(DiskLayer),
        #[prost(message, tag = "4")]
        AdminLayer(AdminLayer),
        #[prost(message, tag = "5")]
        RtdsLayer(RtdsLayer),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LayeredRuntime {
    #[prost(message, repeated, tag = "1")]
    pub layers: ::prost::alloc::vec::Vec<RuntimeLayer>,
}
