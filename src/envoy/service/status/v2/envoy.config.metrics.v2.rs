// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatsSink {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(oneof = "stats_sink::ConfigType", tags = "2, 3")]
    pub config_type: ::core::option::Option<stats_sink::ConfigType>,
}
/// Nested message and enum types in `StatsSink`.
pub mod stats_sink {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ConfigType {
        #[prost(message, tag = "2")]
        Config(super::super::super::super::super::google::protobuf::Struct),
        #[prost(message, tag = "3")]
        TypedConfig(super::super::super::super::super::google::protobuf::Any),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatsConfig {
    #[prost(message, repeated, tag = "1")]
    pub stats_tags: ::prost::alloc::vec::Vec<TagSpecifier>,
    #[prost(message, optional, tag = "2")]
    pub use_all_default_tags: ::core::option::Option<
        super::super::super::super::google::protobuf::BoolValue,
    >,
    #[prost(message, optional, tag = "3")]
    pub stats_matcher: ::core::option::Option<StatsMatcher>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatsMatcher {
    #[prost(oneof = "stats_matcher::StatsMatcher", tags = "1, 2, 3")]
    pub stats_matcher: ::core::option::Option<stats_matcher::StatsMatcher>,
}
/// Nested message and enum types in `StatsMatcher`.
pub mod stats_matcher {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum StatsMatcher {
        #[prost(bool, tag = "1")]
        RejectAll(bool),
        #[prost(message, tag = "2")]
        ExclusionList(super::super::super::super::r#type::matcher::ListStringMatcher),
        #[prost(message, tag = "3")]
        InclusionList(super::super::super::super::r#type::matcher::ListStringMatcher),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TagSpecifier {
    #[prost(string, tag = "1")]
    pub tag_name: ::prost::alloc::string::String,
    #[prost(oneof = "tag_specifier::TagValue", tags = "2, 3")]
    pub tag_value: ::core::option::Option<tag_specifier::TagValue>,
}
/// Nested message and enum types in `TagSpecifier`.
pub mod tag_specifier {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum TagValue {
        #[prost(string, tag = "2")]
        Regex(::prost::alloc::string::String),
        #[prost(string, tag = "3")]
        FixedValue(::prost::alloc::string::String),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatsdSink {
    #[prost(string, tag = "3")]
    pub prefix: ::prost::alloc::string::String,
    #[prost(oneof = "statsd_sink::StatsdSpecifier", tags = "1, 2")]
    pub statsd_specifier: ::core::option::Option<statsd_sink::StatsdSpecifier>,
}
/// Nested message and enum types in `StatsdSink`.
pub mod statsd_sink {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum StatsdSpecifier {
        #[prost(message, tag = "1")]
        Address(super::super::super::super::api::v2::core::Address),
        #[prost(string, tag = "2")]
        TcpClusterName(::prost::alloc::string::String),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DogStatsdSink {
    #[prost(string, tag = "3")]
    pub prefix: ::prost::alloc::string::String,
    #[prost(oneof = "dog_statsd_sink::DogStatsdSpecifier", tags = "1")]
    pub dog_statsd_specifier: ::core::option::Option<
        dog_statsd_sink::DogStatsdSpecifier,
    >,
}
/// Nested message and enum types in `DogStatsdSink`.
pub mod dog_statsd_sink {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum DogStatsdSpecifier {
        #[prost(message, tag = "1")]
        Address(super::super::super::super::api::v2::core::Address),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HystrixSink {
    #[prost(int64, tag = "1")]
    pub num_buckets: i64,
}
