// This file is @generated by prost-build.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RateLimitUnit {
    Unknown = 0,
    Second = 1,
    Minute = 2,
    Hour = 3,
    Day = 4,
    Month = 5,
    Year = 6,
}
impl RateLimitUnit {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            RateLimitUnit::Unknown => "UNKNOWN",
            RateLimitUnit::Second => "SECOND",
            RateLimitUnit::Minute => "MINUTE",
            RateLimitUnit::Hour => "HOUR",
            RateLimitUnit::Day => "DAY",
            RateLimitUnit::Month => "MONTH",
            RateLimitUnit::Year => "YEAR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "SECOND" => Some(Self::Second),
            "MINUTE" => Some(Self::Minute),
            "HOUR" => Some(Self::Hour),
            "DAY" => Some(Self::Day),
            "MONTH" => Some(Self::Month),
            "YEAR" => Some(Self::Year),
            _ => None,
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TokenBucket {
    #[prost(uint32, tag = "1")]
    pub max_tokens: u32,
    #[prost(message, optional, tag = "2")]
    pub tokens_per_fill: ::core::option::Option<
        super::super::super::google::protobuf::UInt32Value,
    >,
    #[prost(message, optional, tag = "3")]
    pub fill_interval: ::core::option::Option<
        super::super::super::google::protobuf::Duration,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RateLimitStrategy {
    #[prost(oneof = "rate_limit_strategy::Strategy", tags = "1, 2, 3")]
    pub strategy: ::core::option::Option<rate_limit_strategy::Strategy>,
}
/// Nested message and enum types in `RateLimitStrategy`.
pub mod rate_limit_strategy {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct RequestsPerTimeUnit {
        #[prost(uint64, tag = "1")]
        pub requests_per_time_unit: u64,
        #[prost(enumeration = "super::RateLimitUnit", tag = "2")]
        pub time_unit: i32,
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum BlanketRule {
        AllowAll = 0,
        DenyAll = 1,
    }
    impl BlanketRule {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                BlanketRule::AllowAll => "ALLOW_ALL",
                BlanketRule::DenyAll => "DENY_ALL",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "ALLOW_ALL" => Some(Self::AllowAll),
                "DENY_ALL" => Some(Self::DenyAll),
                _ => None,
            }
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Strategy {
        #[prost(enumeration = "BlanketRule", tag = "1")]
        BlanketRule(i32),
        #[prost(message, tag = "2")]
        RequestsPerTimeUnit(RequestsPerTimeUnit),
        #[prost(message, tag = "3")]
        TokenBucket(super::TokenBucket),
    }
}
