// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourceLocator {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "2")]
    pub dynamic_parameters: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourceName {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub dynamic_parameter_constraints: ::core::option::Option<
        DynamicParameterConstraints,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DiscoveryRequest {
    #[prost(string, tag = "1")]
    pub version_info: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub node: ::core::option::Option<super::super::super::config::core::v3::Node>,
    #[prost(string, repeated, tag = "3")]
    pub resource_names: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "7")]
    pub resource_locators: ::prost::alloc::vec::Vec<ResourceLocator>,
    #[prost(string, tag = "4")]
    pub type_url: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub response_nonce: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "6")]
    pub error_detail: ::core::option::Option<
        super::super::super::super::google::rpc::Status,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DiscoveryResponse {
    #[prost(string, tag = "1")]
    pub version_info: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub resources: ::prost::alloc::vec::Vec<
        super::super::super::super::google::protobuf::Any,
    >,
    #[prost(bool, tag = "3")]
    pub canary: bool,
    #[prost(string, tag = "4")]
    pub type_url: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub nonce: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "6")]
    pub control_plane: ::core::option::Option<
        super::super::super::config::core::v3::ControlPlane,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeltaDiscoveryRequest {
    #[prost(message, optional, tag = "1")]
    pub node: ::core::option::Option<super::super::super::config::core::v3::Node>,
    #[prost(string, tag = "2")]
    pub type_url: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "3")]
    pub resource_names_subscribe: ::prost::alloc::vec::Vec<
        ::prost::alloc::string::String,
    >,
    #[prost(string, repeated, tag = "4")]
    pub resource_names_unsubscribe: ::prost::alloc::vec::Vec<
        ::prost::alloc::string::String,
    >,
    #[prost(message, repeated, tag = "8")]
    pub resource_locators_subscribe: ::prost::alloc::vec::Vec<ResourceLocator>,
    #[prost(message, repeated, tag = "9")]
    pub resource_locators_unsubscribe: ::prost::alloc::vec::Vec<ResourceLocator>,
    #[prost(map = "string, string", tag = "5")]
    pub initial_resource_versions: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(string, tag = "6")]
    pub response_nonce: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "7")]
    pub error_detail: ::core::option::Option<
        super::super::super::super::google::rpc::Status,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeltaDiscoveryResponse {
    #[prost(string, tag = "1")]
    pub system_version_info: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub resources: ::prost::alloc::vec::Vec<Resource>,
    #[prost(string, tag = "4")]
    pub type_url: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "6")]
    pub removed_resources: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "8")]
    pub removed_resource_names: ::prost::alloc::vec::Vec<ResourceName>,
    #[prost(string, tag = "5")]
    pub nonce: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "7")]
    pub control_plane: ::core::option::Option<
        super::super::super::config::core::v3::ControlPlane,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DynamicParameterConstraints {
    #[prost(oneof = "dynamic_parameter_constraints::Type", tags = "1, 2, 3, 4")]
    pub r#type: ::core::option::Option<dynamic_parameter_constraints::Type>,
}
/// Nested message and enum types in `DynamicParameterConstraints`.
pub mod dynamic_parameter_constraints {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct SingleConstraint {
        #[prost(string, tag = "1")]
        pub key: ::prost::alloc::string::String,
        #[prost(oneof = "single_constraint::ConstraintType", tags = "2, 3")]
        pub constraint_type: ::core::option::Option<single_constraint::ConstraintType>,
    }
    /// Nested message and enum types in `SingleConstraint`.
    pub mod single_constraint {
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, Copy, PartialEq, ::prost::Message)]
        pub struct Exists {}
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum ConstraintType {
            #[prost(string, tag = "2")]
            Value(::prost::alloc::string::String),
            #[prost(message, tag = "3")]
            Exists(Exists),
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ConstraintList {
        #[prost(message, repeated, tag = "1")]
        pub constraints: ::prost::alloc::vec::Vec<super::DynamicParameterConstraints>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Type {
        #[prost(message, tag = "1")]
        Constraint(SingleConstraint),
        #[prost(message, tag = "2")]
        OrConstraints(ConstraintList),
        #[prost(message, tag = "3")]
        AndConstraints(ConstraintList),
        #[prost(message, tag = "4")]
        NotConstraints(::prost::alloc::boxed::Box<super::DynamicParameterConstraints>),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Resource {
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "8")]
    pub resource_name: ::core::option::Option<ResourceName>,
    #[prost(string, repeated, tag = "4")]
    pub aliases: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "1")]
    pub version: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub resource: ::core::option::Option<
        super::super::super::super::google::protobuf::Any,
    >,
    #[prost(message, optional, tag = "6")]
    pub ttl: ::core::option::Option<
        super::super::super::super::google::protobuf::Duration,
    >,
    #[prost(message, optional, tag = "7")]
    pub cache_control: ::core::option::Option<resource::CacheControl>,
    #[prost(message, optional, tag = "9")]
    pub metadata: ::core::option::Option<
        super::super::super::config::core::v3::Metadata,
    >,
}
/// Nested message and enum types in `Resource`.
pub mod resource {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct CacheControl {
        #[prost(bool, tag = "1")]
        pub do_not_cache: bool,
    }
}
