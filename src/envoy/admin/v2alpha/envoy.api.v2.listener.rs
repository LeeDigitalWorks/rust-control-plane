// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Filter {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(oneof = "filter::ConfigType", tags = "2, 4")]
    pub config_type: ::core::option::Option<filter::ConfigType>,
}
/// Nested message and enum types in `Filter`.
pub mod filter {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ConfigType {
        #[prost(message, tag = "2")]
        Config(super::super::super::super::super::google::protobuf::Struct),
        #[prost(message, tag = "4")]
        TypedConfig(super::super::super::super::super::google::protobuf::Any),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FilterChainMatch {
    #[prost(message, optional, tag = "8")]
    pub destination_port: ::core::option::Option<
        super::super::super::super::google::protobuf::UInt32Value,
    >,
    #[prost(message, repeated, tag = "3")]
    pub prefix_ranges: ::prost::alloc::vec::Vec<super::core::CidrRange>,
    #[prost(string, tag = "4")]
    pub address_suffix: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "5")]
    pub suffix_len: ::core::option::Option<
        super::super::super::super::google::protobuf::UInt32Value,
    >,
    #[prost(enumeration = "filter_chain_match::ConnectionSourceType", tag = "12")]
    pub source_type: i32,
    #[prost(message, repeated, tag = "6")]
    pub source_prefix_ranges: ::prost::alloc::vec::Vec<super::core::CidrRange>,
    #[prost(uint32, repeated, packed = "false", tag = "7")]
    pub source_ports: ::prost::alloc::vec::Vec<u32>,
    #[prost(string, repeated, tag = "11")]
    pub server_names: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "9")]
    pub transport_protocol: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "10")]
    pub application_protocols: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Nested message and enum types in `FilterChainMatch`.
pub mod filter_chain_match {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ConnectionSourceType {
        Any = 0,
        Local = 1,
        External = 2,
    }
    impl ConnectionSourceType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                ConnectionSourceType::Any => "ANY",
                ConnectionSourceType::Local => "LOCAL",
                ConnectionSourceType::External => "EXTERNAL",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "ANY" => Some(Self::Any),
                "LOCAL" => Some(Self::Local),
                "EXTERNAL" => Some(Self::External),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FilterChain {
    #[prost(message, optional, tag = "1")]
    pub filter_chain_match: ::core::option::Option<FilterChainMatch>,
    #[deprecated]
    #[prost(message, optional, tag = "2")]
    pub tls_context: ::core::option::Option<super::auth::DownstreamTlsContext>,
    #[prost(message, repeated, tag = "3")]
    pub filters: ::prost::alloc::vec::Vec<Filter>,
    #[prost(message, optional, tag = "4")]
    pub use_proxy_proto: ::core::option::Option<
        super::super::super::super::google::protobuf::BoolValue,
    >,
    #[prost(message, optional, tag = "5")]
    pub metadata: ::core::option::Option<super::core::Metadata>,
    #[prost(message, optional, tag = "6")]
    pub transport_socket: ::core::option::Option<super::core::TransportSocket>,
    #[prost(string, tag = "7")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListenerFilterChainMatchPredicate {
    #[prost(
        oneof = "listener_filter_chain_match_predicate::Rule",
        tags = "1, 2, 3, 4, 5"
    )]
    pub rule: ::core::option::Option<listener_filter_chain_match_predicate::Rule>,
}
/// Nested message and enum types in `ListenerFilterChainMatchPredicate`.
pub mod listener_filter_chain_match_predicate {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct MatchSet {
        #[prost(message, repeated, tag = "1")]
        pub rules: ::prost::alloc::vec::Vec<super::ListenerFilterChainMatchPredicate>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Rule {
        #[prost(message, tag = "1")]
        OrMatch(MatchSet),
        #[prost(message, tag = "2")]
        AndMatch(MatchSet),
        #[prost(message, tag = "3")]
        NotMatch(::prost::alloc::boxed::Box<super::ListenerFilterChainMatchPredicate>),
        #[prost(bool, tag = "4")]
        AnyMatch(bool),
        #[prost(message, tag = "5")]
        DestinationPortRange(super::super::super::super::r#type::Int32Range),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListenerFilter {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub filter_disabled: ::core::option::Option<ListenerFilterChainMatchPredicate>,
    #[prost(oneof = "listener_filter::ConfigType", tags = "2, 3")]
    pub config_type: ::core::option::Option<listener_filter::ConfigType>,
}
/// Nested message and enum types in `ListenerFilter`.
pub mod listener_filter {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ConfigType {
        #[prost(message, tag = "2")]
        Config(super::super::super::super::super::google::protobuf::Struct),
        #[prost(message, tag = "3")]
        TypedConfig(super::super::super::super::super::google::protobuf::Any),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UdpListenerConfig {
    #[prost(string, tag = "1")]
    pub udp_listener_name: ::prost::alloc::string::String,
    #[prost(oneof = "udp_listener_config::ConfigType", tags = "2, 3")]
    pub config_type: ::core::option::Option<udp_listener_config::ConfigType>,
}
/// Nested message and enum types in `UdpListenerConfig`.
pub mod udp_listener_config {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ConfigType {
        #[prost(message, tag = "2")]
        Config(super::super::super::super::super::google::protobuf::Struct),
        #[prost(message, tag = "3")]
        TypedConfig(super::super::super::super::super::google::protobuf::Any),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ActiveRawUdpListenerConfig {}
