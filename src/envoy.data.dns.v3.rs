// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DnsTable {
    #[prost(uint32, tag = "1")]
    pub external_retry_count: u32,
    #[prost(message, repeated, tag = "2")]
    pub virtual_domains: ::prost::alloc::vec::Vec<dns_table::DnsVirtualDomain>,
    #[deprecated]
    #[prost(message, repeated, tag = "3")]
    pub known_suffixes: ::prost::alloc::vec::Vec<
        super::super::super::r#type::matcher::v3::StringMatcher,
    >,
}
/// Nested message and enum types in `DnsTable`.
pub mod dns_table {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct AddressList {
        #[prost(string, repeated, tag = "1")]
        pub address: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct DnsServiceProtocol {
        #[prost(oneof = "dns_service_protocol::ProtocolConfig", tags = "1, 2")]
        pub protocol_config: ::core::option::Option<
            dns_service_protocol::ProtocolConfig,
        >,
    }
    /// Nested message and enum types in `DnsServiceProtocol`.
    pub mod dns_service_protocol {
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum ProtocolConfig {
            #[prost(uint32, tag = "1")]
            Number(u32),
            #[prost(string, tag = "2")]
            Name(::prost::alloc::string::String),
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct DnsServiceTarget {
        #[prost(uint32, tag = "3")]
        pub priority: u32,
        #[prost(uint32, tag = "4")]
        pub weight: u32,
        #[prost(uint32, tag = "5")]
        pub port: u32,
        #[prost(oneof = "dns_service_target::EndpointType", tags = "1, 2")]
        pub endpoint_type: ::core::option::Option<dns_service_target::EndpointType>,
    }
    /// Nested message and enum types in `DnsServiceTarget`.
    pub mod dns_service_target {
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum EndpointType {
            #[prost(string, tag = "1")]
            HostName(::prost::alloc::string::String),
            #[prost(string, tag = "2")]
            ClusterName(::prost::alloc::string::String),
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct DnsService {
        #[prost(string, tag = "1")]
        pub service_name: ::prost::alloc::string::String,
        #[prost(message, optional, tag = "2")]
        pub protocol: ::core::option::Option<DnsServiceProtocol>,
        #[prost(message, optional, tag = "3")]
        pub ttl: ::core::option::Option<
            super::super::super::super::super::google::protobuf::Duration,
        >,
        #[prost(message, repeated, tag = "4")]
        pub targets: ::prost::alloc::vec::Vec<DnsServiceTarget>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct DnsServiceList {
        #[prost(message, repeated, tag = "1")]
        pub services: ::prost::alloc::vec::Vec<DnsService>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct DnsEndpoint {
        #[prost(oneof = "dns_endpoint::EndpointConfig", tags = "1, 2, 3")]
        pub endpoint_config: ::core::option::Option<dns_endpoint::EndpointConfig>,
    }
    /// Nested message and enum types in `DnsEndpoint`.
    pub mod dns_endpoint {
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum EndpointConfig {
            #[prost(message, tag = "1")]
            AddressList(super::AddressList),
            #[prost(string, tag = "2")]
            ClusterName(::prost::alloc::string::String),
            #[prost(message, tag = "3")]
            ServiceList(super::DnsServiceList),
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct DnsVirtualDomain {
        #[prost(string, tag = "1")]
        pub name: ::prost::alloc::string::String,
        #[prost(message, optional, tag = "2")]
        pub endpoint: ::core::option::Option<DnsEndpoint>,
        #[prost(message, optional, tag = "3")]
        pub answer_ttl: ::core::option::Option<
            super::super::super::super::super::google::protobuf::Duration,
        >,
    }
}
